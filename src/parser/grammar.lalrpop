use std::str::FromStr;
use crate::parser::ast::{Statement, Expression, OperationType};

grammar;

pub Program = Separated<Statement, ";">;

Separated<T, Separator>: Vec<T> = {
    <vector:(<T> Separator)*> <end:T?> => match end {
        None => vector,
        Some(end) => {
            let mut vector = vector;
            vector.push(end);
            vector
        }
    }
};

Statement: Statement = {
    <Identifier> "=" <Expression> => Statement::Assignment(<>),
    Expression => Statement::Expression(<>)
};

Identifier: String = r"[a-z]\w*" => <>.to_string();

Expression = Expression1;

Expression1 = {
    Expression2 AdditionOperator Expression1 => Box::new(Expression::Operation(<>)),
    Expression2
};

Expression2 = {
    Expression2 SubtractionOperator Expression3 => Box::new(Expression::Operation(<>)),
    Expression3
};

Expression3 = {
    Expression3 MultiplicationOperator Expression4 => Box::new(Expression::Operation(<>)),
    Expression3 DivisionOperator Expression4 => Box::new(Expression::Operation(<>)),
    Expression4
};

Expression4: Box<Expression> = {
    Number => Box::new(Expression::Literal(<>)),
    Identifier => Box::new(Expression::Variable(<>)),
    "(" <Expression> ")"
};

Number: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};

AdditionOperator: OperationType = {
    "+" => OperationType::Addition
};

SubtractionOperator: OperationType = {
    "-" => OperationType::Subtraction
};

MultiplicationOperator: OperationType = {
    "*" => OperationType::Multiplication
};

DivisionOperator: OperationType = {
    "/" => OperationType::Division
};
